---
- name: Download File
  tags:
    - download
  # when:
  #   - download.install and ((download.install is not file) or (download.version not in lookup('lines', download.install + ' --version')))
  block:
    - name: prep_download | Set a few facts
      set_fact:
        download_force_cache: "{{ true if download_run_once else download_force_cache }}"

    - name: download_file | Starting download of file
      debug:
        msg: "{{ download.url }}"
      run_once: "{{ download_run_once }}"

    # This must always be called, to check if the checksum matches. On no-match the file is re-downloaded.
    # This task will avoid logging it's parameters to not leak environment passwords in the log
    - name: download_file | Download item
      get_url:
        url: "{{ download.url }}"
        dest: "{{ download.dest }}"
        owner: "{{ download.owner | default(omit) }}"
        group: "{{ download.group | default(omit) }}"
        mode: "{{ download.mode | default(omit) }}"
        checksum: "{{ 'sha256:' + download.sha256 if download.sha256 else omit }}"
        validate_certs: "{{ download_validate_certs }}"
        url_username: "{{ download.username | default(omit) }}"
        url_password: "{{ download.password | default(omit) }}"
        force_basic_auth: "{{ download.force_basic_auth | default(omit) }}"
      delegate_to: "{{ download_delegate if download_force_cache else inventory_hostname }}"
      run_once: "{{ download_force_cache }}"
      register: get_url_result
      until: "'OK' in get_url_result.msg or 'file already exists' in get_url_result.msg or 'Not Modified' in get_url_result.msg"
      retries: "{{ download_retries }}"
      delay: "{{ retry_stagger | default(5) }}"
      environment: "{{ proxy_env }}"
      no_log: "{{ not (unsafe_show_logs|bool) }}"

    - name: download_file | Unpacking archive
      ansible.builtin.unarchive:
        src: "{{ download.dest }}"
        dest: "{% if 'install' in download %}{{ download.install | dirname }}{% else %}{{download.dest|dirname}}{%endif%}"
        include: "{{ download.include | default(omit)}}"
        owner: "{{ download.owner | default(omit) }}"
        mode: "{{ download.mode | default(omit) }}"
        remote_src: true
        extra_opts: "{{ download.unarchive_extra_opts|default(omit) }}"
      when:
        - download.unarchive | default(false)
      vars:
        ansible_remote_tmp: /tmp

    - name: download_file | Install files
      ansible.posix.synchronize:
        src: "{{ download.dest }}"
        dest: "{{ download.install }}"
        use_ssh_args: true
        mode: push
      delegate_to: "{{ download_delegate }}"
      when:
        - download.install is defined
        - not download.unarchive
