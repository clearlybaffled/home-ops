---
- name: Ensure namespace exists | {{ app.namespace }}
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ app.namespace }}"

- name: Manage app secrets | {{ app.name }}
  when: app.secrets is defined
  block:
    - name: Generate secrets | {{ app.name }}
      include_tasks: generate_secret.yml

    - name: Render KSOPS generator template | {{ app.name }}
      template:
        src: secret-generator.yaml.j2
        dest: "{{ app.app_dir }}/secret-generator.yaml"
        force: true
      register: ksops

- name: Get Kubernetes Cluster info
  kubernetes.core.k8s_cluster_info:
  register: cluster_info

- name: "Install Kustomization file | {{ app.name }}"
  template:
    src: kustomization.yaml.j2
    dest: "{{ app.app_dir }}/kustomization.yaml"
    mode: "0644"
    force: true
  register: kustomization
  when: ('kustomize' in app) or ('secrets' in app)
  vars:
    k8s_apis: "{{ cluster_info.apis.keys() | list }}"

- name: "Install PersistentVolumeClaim file | {{ app.name }}"
  template:
    src: 'pvc.yaml.j2'
    dest: "{{ app.app_dir }}/pvc.yaml"
    mode: "0644"
    force: true
  when: app.pvc is defined and app.pvc
  register: pvc

- name: Ensure cluster/bootstrap namespace dir exists
  file:
    path: "{{ (cluster_dir, 'bootstrap', app.namespace ) | path_join }}"
    state: directory

- name: ArgoCD application manifest | {{ app.name }}
  template:
    src: application.yaml.j2
    dest: "{{ app.manifest_file }}"
    mode: "0644"
    force: true
  register: application
  tags: manifest

- name: "Application specific pre-start tasks | {{ app.name }}"
  include_tasks: "{{ taskfile }}"
  with_first_found:
    - files:
        - "pre-start/{{ app.name }}.yml"
      skip: true
  loop_control:
    loop_var: taskfile
  register: app_tasks
  tags:
    - app_tasks

- name: Create and push git commit
  include_tasks: git-commit.yml
  when: 
    - not app_batch | default(false)

- name: Launch application when wave is defined
  block:
    - name: Launch application now | {{ app.name }}
      kubernetes.core.k8s:
        src: "{{ app.manifest_file }}"
        server_side_apply:
          field_manager: ansible
      tags: app_tasks

    - name: "Application specific post-launch tasks | {{ app.name }}"
      include_tasks: "{{ taskfile }}"
      with_first_found:
        - files:
            - "post-launch/{{ app.name }}.yml"
          skip: true
      loop_control:
        loop_var: taskfile
      register: app_tasks
      tags:
        - app_tasks

- name: Check before continuing to next app | {{ app.name }}
  pause:
    prompt: "Continue to {{ ansible_loop.nextitem.name }}"
  when:
    - not ansible_loop.last
    - not app_no_loop_pause|default(false)
    - not app_batch | default(false)
