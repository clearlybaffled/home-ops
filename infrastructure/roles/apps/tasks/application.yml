---
- name: Ensure namespace exists | {{ app.namespace }}
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: "{{ app.namespace }}"

- name: Manage app secrets | {{ app.name }}
  when: app.secrets is defined
  block:
    - name: Generate secrets | {{ app.name }}
      include_tasks: generate_secret.yml
      loop: "{{ app.secrets | dict2items(key_name='name') }}"
      loop_control:
        loop_var: secret
      when:
        - sops_file is not file
        - secret.value != {}
      vars:
        sops_file: "{{ (app.app_dir, secret.name+'.sops.yaml')| path_join }}"

    - name: Render KSOPS generator template | {{ app.name }}
      blockinfile:
        block: "{{ lookup('template', 'secret-generator.yaml.j2', convert_data=false) }}"
        path: "{{ app.app_dir }}/secret-generator.yaml"
      register: ksops

- name: ArgoCD application manifest | {{ app.name }}
  blockinfile:
    block: "{{ lookup('template', 'application.yaml.j2', convert_data=false) }}"
    dest: "{{ app.manifest_file }}"
    mode: "0644"
    create: true
  register: application

- name: "Install Kustomization file | {{ app.name }}"
  blockinfile:
    block: "{{ lookup('template', 'kustomization.yaml.j2', convert_data=false) }}"
    dest: "{{ app.app_dir }}/kustomization.yaml"
    mode: "0644"
    create: true
  register: kustomization
  when: ('kustomize' in app) or ('secrets' in app)

- name: "Install PersistentVolumeClaim file | {{ app.name }}"
  blockinfile:
    block: "{{ lookup('template', 'pvc.yaml.j2', convert_data=false) }}"
    dest: "{{ app.app_dir }}/pvc.yaml"
    mode: "0644"
    create: true
  when: app.pvc is defined and app.pvc
  register: pvc

- name: "Application specific pre-start tasks | {{ app.name }}"
  include_tasks: "{{ taskfile }}"
  with_first_found:
    - files:
        - "pre-start/{{ app.name }}.yml"
      skip: true
  loop_control:
    loop_var: taskfile
  register: app_tasks
  tags:
    - app_tasks
- name: Commit changes to app files | {{ app.name }}
  lvrfrc87.git_acp.git_acp:
    path: "{{ root_dir }}"
    comment: "[{{ app.name }}] Updated application config files"
    add:
      - "{{ app.app_dir }}"
      - "{{ app.manifest_file }}"
    url: "{{ git_repo_ssh_url }}"
    push: true
    branch: "{{ git_branch }}"
  when: lookup('pipe','git status --porcelain -- ' + (app.app_dir, app.manifest_file) | join(' '))
  tags: commit

- name: Launch application when wave <= 3
  when:
    - app.wave is defined
    - app.wave|int <= 3
  block:
    - name: Launch application now | {{ app.name }}
      kubernetes.core.k8s:
        src: "{{ app.manifest_file }}"
        server_side_apply:
          field_manager: ansible
      tags: app_tasks

    - name: "Application specific post-launch tasks | {{ app.name }}"
      include_tasks: "{{ taskfile }}"
      with_first_found:
        - files:
            - "post-launch/{{ app.name }}.yml"
          skip: true
      loop_control:
        loop_var: taskfile
      register: app_tasks
      tags:
        - app_tasks

- name: Check before continuing to next app | {{ app.name }}
  pause:
    prompt: "Continue to {{ ansible_loop.nextitem.name }}"
  when: not ansible_loop.last
