---
- name: Build up app_list to include some conventions for file locations and sort by wave
  set_fact:
    app_list: >-
      {{
          app_list | default([]) +
          [
            item.1 | combine({
              'name': item.0,
              'app_dir': (
                  cluster_dir,
                  ('path' in item.1) |
                    ternary(
                      item.1.path|default(omit) if (item.1.path|default(omit) == '') else ('apps', item.1.path|default(omit)),
                      ('apps', item.1.namespace)
                    ),
                  item.0
                ) | flatten |  path_join,
              'manifest_file':
                (
                  cluster_dir,
                  'bootstrap',
                  ('path' in item.1) | ternary(item.1.path, item.1.namespace),
                  item.0+'.yaml'
                ) | path_join
            })
          ]
      }}
  loop: >-
      {{
        (
          (apps | items | selectattr('1.wave','defined') | sort(attribute='1.wave')) +
          (apps | items | rejectattr('1.wave','defined'))
        )
      }}
  loop_control:
    label: "{{ item.0 }}"
  when:
    # Don't include if app.createApp is false
    - item.1.createApp | default(true)
    # Start deploying when argument app_start_wave is app.wave 
    - item.1.wave|default(10)|int >= app_start_wave|default(omit)|int
    # If there's an argument called app_deploy_list, only include the app if its present
    - item.0 in app_deploy_list|default(apps.keys())
    # If there's an argument called app_reject_list, don't include this app if its present
    - item.0 not in app_reject_list|default(omit)

- name: Install Application specific configurations and files
  include_tasks: application.yml
  loop: "{{ app_list }}"
  loop_control:
    loop_var: app
    label: "{{ app.name }}"
    extended: true
    # extended_allitems: false
  vars:
    mysql_app: "{{ app_list | selectattr('name','eq','mysql') | first }}"
    postgres_app: "{{ app_list | selectattr('name','eq','cloudnative-pg') | first }}"
    mysql_secret: >-
      {{
        lookup(
          'community.sops.sops',
          (
            mysql_item.1.app_dir,
            mysql_item.1.secrets.keys() | first ~ '.sops.yaml'
          ) | path_join
        )
      }}
    postgres_secret: >-
      {{
        lookup(
          'community.sops.sops',
          (
            postgres_item.1.app_dir,
            (postgres_item.1.secrets | items | selectattr('1.data.username','eq', 'postgres') | first ).0 ~ '.sops.yaml'
          ) | path_join
        )
      }}
