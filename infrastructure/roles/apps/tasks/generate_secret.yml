---
- name: Generate passwords and write sops file
  vars:
    generated_credentials: {}
    secret_length:
      password: 30
      key: 60
  block:
    - name: Generate Secrets
      set_fact:
        generated_credentials: "{{ generated_credentials | combine( {item.key: lookup('password', '/dev/null', length=secret_length[item.value])} ) }}"
      loop: "{{ app.secrets.generate | dict2items }}"
      when: item.value in ('password','key')

    - name: Collect secret data
      set_fact:
        secret_data

    - name: Write out SOPS file(s)
      community.sops.sops_encrypt:
        path: "{{ sops_file }}"
        encrypted_regex: "^(data|stringData)$"
        content_yaml: "{{ lookup('template', 'secret.yaml.j2', convert_data=false) | from_yaml}}"
      loop: "{{ app.secrets | dict2items(key_name='name') | rejectattr('name','==','generate') }}"
      loop_control:
        loop_var: secret_spec
      when:
        - sops_file is not file
        - secret_spec.value
      vars:
        sops_file: "{{ (app.app_dir, secret_spec.name+'.sops.yaml')| path_join }}"
        secret:
          name: "{{ secret_spec.name }}"
          namespace: "{{ secret_spec.namespace | default(omit) }}"


  always:
    - name: Unset credential facts
      set_fact:
        generated_credentials:
