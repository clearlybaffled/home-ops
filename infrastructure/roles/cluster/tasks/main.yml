---
- name: Cache DB credentials
  set_fact:
    mysql_secret: "{{ query('kubernetes.core.k8s', kind='Secret', namespace='db', resource_name='mysql')[0].data }}"
    postgres_secret: "{{ query('kubernetes.core.k8s', kind='Secret', namespace='db', resource_name='cnpg-cluster-superuser')[0].data }}"

- name: Install sops-age-key secret
  kubernetes.core.k8s:
    api_version: v1
    kind: Secret
    namespace: argocd
    name: sops-age-key
    definition:
      data:
        keys.txt: "{{ lookup('file', (lookup('env','HOME'), '.config', 'sops', 'age', 'keys.txt')| path_join) | b64encode }}"

- name: Install Application specific configurations and files
  include_tasks: application.yml
  when: item.value.createApp is not defined or item.value.createApp
  loop: "{{ (apps | items | selectattr('1.wave','defined') | sort(attribute='1.wave')) + (apps|items|rejectattr('1.wave','defined'))}}"
  loop_control:
    label: "{{ item.0 }}"
  vars:
    app: "{{ item.1 | combine({'name': item.0}) }}"
    app_dir: >-
      {{ (
          cluster_dir,
          (item.0 == 'argocd') | ternary('', 'apps'),
          ('path' in item.1) | ternary(item.1.path, item.1.namespace),
          item.0
        ) | path_join
      }}

# - name: Install ArgoCD
#   kubernetes.core.k8s:
#     definition: "{{ lookup('kubernetes.core.kustomize', dir=((cluster_dir, 'argocd')|path_join), binary_path=root_dir+'/scripts/kustomize') }}"
#     ca_cert: "{{ cluster_cacerts }}"
#     server_side_apply:
#       field_manager: ansible
#   tags: argocd
#   when: not query('kubernetes.core.k8s', kind='CustomResourceDefinition', resource_name='applications.argoproj.io')

# - name: Bootstrap cluster
#   kubernetes.core.k8s:
#     src: "{{ (cluster_dir, 'cluster.yaml') | path_join }}"
#     ca_cert: "{{ cluster_cacerts }}"
#     server_side_apply:
#       field_manager: ansible
#   tags: bootstrap
#   when: not query('kubernetes.core.k8s', kind='Application', namespace='argocd', resource_name='cluster', api_version='argoproj.io/v1alpha1')
