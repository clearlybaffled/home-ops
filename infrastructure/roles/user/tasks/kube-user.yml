---
- name: Check for existing user
  delegate_to: "{{ groups['kube_control_plane'][0] }}"
  connection: ssh
  become: true
  kubernetes.core.k8s_info:
    kind: CertificateSigningRequest
    name: "{{ kube_user }}-csr"
    api_version: certificates.k8s.io/v1
    kubeconfig: "{{ kubeconfig_file }}"
  register: user_status

- name: Create User
  when: not user_status.resources
  block:
    - name: user | Generate private key
      community.crypto.openssl_privatekey_pipe:
        type: Ed25519
      register: private_key

    - name: user | Generate CSR
      community.crypto.openssl_csr_pipe:
        privatekey_content: "{{ private_key.privatekey }}"
        common_name: "{{ kube_user }}"
        organization_name: service:masters
      register: csr

    - name: user | Process user request on control plane
      delegate_to: "{{ groups['kube_control_plane'][0] }}"
      connection: ssh
      become: true
      block:
        - name: user | Create ClusterRoleBinding and submit CSR
          kubernetes.core.k8s:
            kubeconfig: "{{ kubeconfig_file }}"
            template: create-user.yml.j2
            ca_cert: "/etc/ssl/certs/ca-certificates.crt"

        - name: user | Approve CSR
          command: "{{ kubectl }} certificate approve {{ kube_user }}-csr"
          register: approve_csr
          failed_when: approve_csr.rc != 0

        - name: user | Get Signed certificate
          command: "{{ kubectl }} get csr {{ kube_user }}-csr -o jsonpath='{.status.certificate}'"
          register: crt
          until: crt.stdout is ne ""
          retries: 10
          delay: 5

        - name: user | get kubernetes cluster ca file
          slurp:
            src: "{{ kube_cluster_cacerts }}"
          register: ca_file_data
        - name: user | save ca data as fact
          set_fact:
            cluster_ca_data: "{{ ca_file_data.content  | replace('\n','') }}"

    - name: user | Create kubeconfig file
      set_fact:
        kubeconfig_str: "{{ lookup('ansible.builtin.template', 'kubeconfig.yml.j2') }}"
  always:
    - name: Make sure that output (which contains the private key) is overwritten
      set_fact:
        private_key: ''
        csr: ''
        crt: ''

- name: Make sure kubeconfig is set
  set_fact:
    kubeconfig: "{{ kubeconfig_str | default('') }}"
