---

- name: kubeadm | Check if kubeadm has already run
  stat:
    path: "/etc/kubernetes/admin.config"
    get_attributes: false
    get_checksum: false
    get_mime: false
  register: kubeadm_already_run
  any_errors_fatal: false

- name: kubeadm | aggregate all SANs
  set_fact:
    apiserver_sans: "{{ (sans_base + groups['kube_control_plane'] + sans_lb + sans_lb_ip + sans_supp + sans_access_ip + sans_ip + sans_address + sans_override + sans_hostname + sans_fqdn + sans_kube_vip_address + sans_kube_service_ip) | unique }}"
  vars:
    sans_base:
      - "kubernetes"
      - "kubernetes.default"
      - "kubernetes.default.svc"
      - "kubernetes.default.svc.{{ dns_domain }}"
      - "{{ kube_apiserver_ip }}"
      - "localhost"
      - "127.0.0.1"
    sans_lb: "{{ [apiserver_loadbalancer_domain_name] if apiserver_loadbalancer_domain_name is defined else [] }}"
    sans_lb_ip: "{{ [loadbalancer_apiserver.address] if loadbalancer_apiserver is defined and loadbalancer_apiserver.address is defined else [] }}"
    sans_supp: "{{ supplementary_addresses_in_ssl_keys if supplementary_addresses_in_ssl_keys is defined else [] }}"
    sans_access_ip: "{{ groups['kube_control_plane'] | map('extract', hostvars, 'access_ip') | list | select('defined') | list }}"
    sans_ip: "{{ groups['kube_control_plane'] | map('extract', hostvars, 'ip') | list | select('defined') | list }}"
    sans_address: "{{ groups['kube_control_plane'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list | select('defined') | list }}"
    sans_override: "{{ [kube_override_hostname] if kube_override_hostname else [] }}"
    sans_hostname: "{{ groups['kube_control_plane'] | map('extract', hostvars, ['ansible_hostname']) | list | select('defined') | list }}"
    sans_fqdn: "{{ groups['kube_control_plane'] | map('extract', hostvars, ['ansible_fqdn']) | list | select('defined') | list }}"
    sans_kube_vip_address: "{{ [kube_vip_address] if kube_vip_address is defined and kube_vip_address else [] }}"
    sans_kube_service_ip: "{{ [ kube_service_addresses | ipaddr('net')|ipaddr(1)|ipaddr('address') ] }}"
  tags: facts

- name: Install kubeadm.config file
  template:
    src: kubeadm-config.yml.j2
    dest: "{{ kube_config_dir }}/kubeadm-config.yaml"
    owner: "{{ kube_owner }}"
    mode: "0640"


- name: kubeadm | Initialize first master
  vars:
    pki_keypath: "{{ (pki_dir, 'kubernetes-ca', 'kubernetes-ca.key') | path_join }}"
    pki_certpath: "{{ (pki_dir, 'kubernetes-ca', 'kubernetes-ca.crt') | path_join }}"
    csr_path: "{{ (pki_dir, 'kubernetes-ca', 'kubernetes-ca.csr') | path_join }}"
  block:
    - name: kubeadm | Check for Kubernetes CA files
      stat:
        path: "{{ item }}"
      register: kube_ca
      with_items:
        - pki_keypath
        - pki_certpath

    - name: kubeadm | Create Kubernetes CA if it doesn't exist
      when: kube_ca.results | selectattr('stat.exists', 'false') | length > 0
      block:
        - name: kubeadm | Create CSR for Kubernetes CA
          command: 
            cmd: >-
              openssl req
              -new
              -config {{ role_path }}/files/req.conf
              -keyout {{ pki_dir }}/kubernetes-ca/kubernetes-ca.key
              -subj '/C=US/O=HERMLEIGH.HOME/OU=Kubernetes Cluster Seawolf ICA-01/CN=kubernetes-ca'
              -out {{ csr_path }}
            creates: "{{ csr_path }}"

        - name: Sign CSR
          include_role:
            name: ca
            apply:
              signing_ca: root-ca
              purpose: ca

        - name: Encrypt Kubernetes CA files
          community.sops.sops_encrypt:
            path: "{{ item }}"
            content_binary: "{{ lookup('file', item, rstrip=false) | b64encode }}"
          with_items:
            - pki_keypath
            - pki_certpath
        
        - name: Remove CSR
          file:
            path: "{{ csr_path }}"
            state: absent

    - name: kubeadm | Install Kubernetes CA cert and key files
      copy:
        dest: "{{ kube_cert_dir }}/ca.{{ item }}"
        content: "{{ lookup('community.sops.sops', (pki_dir, 'kubernetes-ca', 'kubernetes-ca.'+item)|path_join) }}"
        owner: root
        group: root
        mode: preserve
      with_items:
        - crt
        - key

    - name: kubeadm | Create cacert file with full cert chain
      copy:
        dest: "{{ kube_cert_dir }}/cacerts.pem"
        content: |-
          {{ lookup('community.sops.sops', pki_certpath ) }}
          {{ root-ca.crt }}

    - name: kubeadm | Init certs phase
      command: >-
        {{ bin_dir }}/kubeadm init
        phase certs all
        --config={{ kube_config_dir }}/kubeadm-config.yaml

    - name: kubeadm | Append ca cert to apiserver cert
      shell: >-
        cat {{ kube_cert_dir }}/ca.crt >> {{ kube_cert_dir }}/apiserver.crt

    - name: kubeadm | Finish kubeadm init
      command: >-
        timeout -k {{ kubeadm_init_timeout }} {{ kubeadm_init_timeout }}
        {{ bin_dir }}/kubeadm init
        --config={{ kube_config_dir }}/kubeadm-config.yaml
        --skip-phases=certs
        --ignore-preflight-errors=all
        {{ kube_external_ca_mode | ternary('', '--upload-certs') }}
      register: kubeadm_init
      # Retry is because upload config sometimes fails
      retries: 3
      until: kubeadm_init is succeeded or "field is immutable" in kubeadm_init.stderr
      when: inventory_hostname == groups["kube_control_plane"][0] # and not kubeadm_already_run.stat.exists
      failed_when: kubeadm_init.rc != 0 and "field is immutable" not in kubeadm_init.stderr
      environment:
        PATH: "{{ bin_dir }}:{{ ansible_env.PATH }}"
      notify: Kubelet | restart kubelet

# - name: Create cluster user for ansible
#   include_role:
#     name: kubernetes/users
#   vars:
#     kube_user: ansible-admin
#     username: "{{ local_ansible_user }}"
#     groupname: "{{ local_ansible_group }}"

# - name: Write kubeconfig
#   copy:
#     dest: "{{ local_ansible_homedir }}/.kube/config"
#     content: "{{ kubeconfig }}"
#     owner: "{{ local_ansible_user }}"
#     group: "{{ local_ansible_group }}"
#     mode: "0600"
#     force: true
