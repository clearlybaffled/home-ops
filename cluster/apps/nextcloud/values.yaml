## Official nextcloud image version
## ref: https://hub.docker.com/r/library/nextcloud/tags/
##
image:
  flavor: apache

## Allowing use of ingress controllers
## ref: https://kubernetes.io/docs/concepts/services-networking/ingress/
##
ingress:
  enabled: true
  className: nginx
  annotations:
     cert-manager.io/cluster-issuer: ca-issuer
     hajimari.io/icon: simple-icons:nextcloud
     nginx.ingress.kubernetes.io/proxy-body-size: "10G"
     nginx.ingress.kubernetes.io/proxy-buffering: "off"
     nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
  #  nginx.ingress.kubernetes.io/server-snippet: |-
  #    server_tokens off;
  #    proxy_hide_header X-Powered-By;
  #    rewrite ^/.well-known/webfinger /index.php/.well-known/webfinger last;
  #    rewrite ^/.well-known/nodeinfo /index.php/.well-known/nodeinfo last;
  #    rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
  #    rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json;
  #    location = /.well-known/carddav {
  #      return 301 $scheme://$host/remote.php/dav;
  #    }
  #    location = /.well-known/caldav {
  #      return 301 $scheme://$host/remote.php/dav;
  #    }
  #    location = /robots.txt {
  #      allow all;
  #      log_not_found off;
  #      access_log off;
  #    }
  #    location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
  #      deny all;
  #    }
  #    location ~ ^/(?:autotest|occ|issue|indie|db_|console) {
  #      deny all;
  #    }
  tls:
    - secretName: nextcloud-tls
      hosts:
        - &host nextcloud.gato.hermleigh.home
        - nextcloud.gato
  labels: {}
  path: /
  pathType: Prefix

nextcloud:
  host: *host
  ## Use an existing secret
  existingSecret:
    enabled: true
    secretName: nextcloud-secret
    usernameKey: nextcloud-username
    passwordKey: nextcloud-password
    # tokenKey: nextcloud-token
    # smtpUsernameKey: smtp-username
    # smtpPasswordKey: smtp-password
  update: 0
  # If web server is not binding default port, you can define it
  containerPort: 80
  datadir: /var/www/html/data
  persistence:
    subPath: data
  mail:
    enabled: false
    fromAddress: user
    domain: domain.com
    smtp:
      host: domain.com
      secure: ssl
      port: 465
      authtype: LOGIN
      name: user
      password: pass

  # Default config files
  # IMPORTANT: Will be used only if you put extra configs, otherwise default will come from nextcloud itself
  # Default confgurations can be found here: https://github.com/nextcloud/docker/tree/master/27/apache/config
  defaultConfigs: 
    # To protect /var/www/html/config
    .htaccess: false
    # Redis default configuration
    redis.config.php: false
    # Apache configuration for rewrite urls
    apache-pretty-urls.config.php: false
    # Define APCu as local cache
    apcu.config.php: false
    # Apps directory configs
    apps.config.php: false
    # Used for auto configure database
    autoconfig.php: false
    # SMTP default configuration
    smtp.config.php: false

  # Extra config files created in /var/www/html/config/
  # ref: https://docs.nextcloud.com/server/15/admin_manual/configuration_server/config_sample_php_parameters.html#multiple-config-php-file
  configs: 
    network.config.php: |-
      <?php
        $CONFIG = array (
          "trusted_domains" =>
            array (
              0 => 'localhost',
              1 => 'nextcloud.gato.hermleigh.home',
              2 => 'nextcloud.gato'
          ),
          "overwrite.cli.url" => 'https://nextcloud.gato.hermleigh.home',
          "overwriteprotocol" => 'https'
        );
  
    #     "dbtype"        => "mysql",
    #     "dbname"        => "nextcloud",
    #     "dbuser"        => "username",
    #     "dbpassword"    => "password",
    #     "dbhost"        => "localhost",
    #     "dbtableprefix" => "oc_",

  # For example, to use S3 as primary storage
  # ref: https://docs.nextcloud.com/server/13/admin_manual/configuration_files/primary_storage.html#simple-storage-service-s3
  #
  #  configs:
  #    s3.config.php: |-
  #      <?php
  #      $CONFIG = array (
  #        'objectstore' => array(
  #          'class' => '\\OC\\Files\\ObjectStore\\S3',
  #          'arguments' => array(
  #            'bucket'     => 'my-bucket',
  #            'autocreate' => true,
  #            'key'        => 'xxx',
  #            'secret'     => 'xxx',
  #            'region'     => 'us-east-1',
  #            'use_ssl'    => true
  #          )
  #        )
  #      );

  ## Strategy used to replace old pods
  ## IMPORTANT: use with care, it is suggested to leave as that for upgrade purposes
  ## ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
  strategy:
    type: Recreate

  ##
  ## Extra environment variables
  extraEnv:
    - name: REDIS_HOST
      value: redis.db
    - name: REDIS_HOST_PASSWORD
      valueFrom:
        secretKeyRef:
          name: nextcloud-secret
          key: redis-password
    - name: TZ
      value: America/New_York

  # Extra mounts for the pods. Example shown is for connecting a legacy NFS volume
  # to NextCloud pods in Kubernetes. This can then be configured in External Storage
  # extraVolumes:
  # - name: shared
  #   persistentVolumeClaim:
  #     claimName: shared-files
  # - name: videos
  #   persistentVolumeClaim:
  #     claimName: videos
  # extraVolumeMounts:
  # - name: shared
  #   mountPath: "/shared"
  # - name: videos
  #   mountPath: /videos

internalDatabase:
  enabled: false

externalDatabase:
  enabled: true
  ## Supported database engines: mysql or postgresql
  type: mysql
  ## Database hostK
  host: mysql.db
  ## Database name
  database: nextcloud
  ## Use a existing secret
  existingSecret:
    enabled: true
    secretName: nextcloud-secret
    usernameKey: db-username
    passwordKey: db-password

mariadb:
  enabled: false
redis:
  enabled: false

service:
 type: ClusterIP
 port: 8080

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  # Nextcloud Data (/var/www/html)
  enabled: true
  storageClass: "ceph-block"
  accessMode: ReadWriteOnce
  size: 2Gi

  ## Use an additional pvc for the data directory rather than a subpath of the default PVC
  ## Useful to store data on a different storageClass (e.g. on slower disks)
  nextcloudData:
    enabled: true
    subPath: data
    annotations: {}
    storageClass: "ceph-filesystem"
    accessMode: ReadWriteMany
    size: 12Gi

resources:
  limits:
   cpu: 100m
   memory: 128Mi
  requests:
   cpu: 100m
   memory: 128Mi

## Prometheus Exporter / Metrics
##
metrics:
  enabled: true

  replicaCount: 1
  # The metrics exporter needs to know how you serve Nextcloud either http or https
  https: false
  # Use API token if set, otherwise fall back to password authentication
  # https://github.com/xperimental/nextcloud-exporter#token-authentication
  # Currently you still need to set the token manually in your nextcloud install
  token: ""
  timeout: 5s
  # if set to true, exporter skips certificate verification of Nextcloud server.
  tlsSkipVerify: false

  image:
    repository: xperimental/nextcloud-exporter
    tag: 0.6.0
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - myRegistrKeySecretName

  ## Metrics exporter resource requests and limits
  ## ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  # resources: {}

  ## Metrics exporter pod Annotation and Labels
  # podAnnotations: {}

  # podLabels: {}

  service:
    type: ClusterIP
    ## Use serviceLoadBalancerIP to request a specific static IP,
    ## otherwise leave blank
    # loadBalancerIP:
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9205"
    labels: {}

  ## Prometheus Operator ServiceMonitor configuration
  ##
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Create ServiceMonitor Resource for scraping metrics using PrometheusOperator
    ##
    enabled: true

    ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
    ##
    namespace: "monitoring"

    ## @param metrics.serviceMonitor.jobLabel The name of the label on the target service to use as the job name in prometheus.
    ##
    jobLabel: "nextcloud"

    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    interval: 30s

    ## @param metrics.serviceMonitor.scrapeTimeout Specify the timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    scrapeTimeout: ""

    ## @param metrics.serviceMonitor.labels Extra labels for the ServiceMonitor
    ##
    labels: {}

livenessProbe:
  enabled: false
readinessProbe:
  enabled: false
